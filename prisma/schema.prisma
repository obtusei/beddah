generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./eddah.db"
// }
enum UserType {
  user
  admin
}

model Org {
  id          String      @id @default(cuid())
  name        String
  email       String
  password    String?
  bio         String?
  isVerified  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  location    String?
  phone       String?
  image       String?
  rescues     Rescues[]
  adopt       Adopt[]
  pets        Pet[]
  communities Community[]
}

model Rescues {
  id    String  @id @default(cuid())
  pet   Pet?    @relation(fields: [petId], references: [id])
  petId String?
  org   Org?    @relation(fields: [orgId], references: [id])
  orgId String?
}

model User {
  id                  String        @id @default(cuid())
  email               String        @unique
  name                String?
  bio                 String?
  password            String
  image               String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  type                String        @default("user")
  communitiesFollowed Community[]
  Pet                 Pet[]
  Adopt               Adopt[]
  Saved               Saved[]
  createdCommunity    Community[]   @relation(name: "creator")
  vet                 Veterinarian?
}

model Veterinarian {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  location  String?
  shopName  String?
  shopImage String?
  contact   String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
}

model Saved {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Pet       Pet?     @relation(fields: [petId], references: [id])
  petId     String?
}

model Community {
  id        String   @id @default(cuid())
  name      String
  username  String   @unique
  bio       String?
  creator   User?    @relation(name: "creator", fields: [creatorId], references: [id])
  creatorId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   User[]
  Org       Org?     @relation(fields: [orgId], references: [id])
  orgId     String?
}

model Pet {
  id           String    @id @default(cuid())
  name         String
  bio          String?
  age          Int?
  breed        String?
  gender       String?
  image        String?
  characters   String[]
  dieases      String[]
  vaccinations String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Adopt        Adopt[]
  Saved        Saved[]
  owner        User?     @relation(fields: [ownerId], references: [id])
  ownerId      String?
  Rescues      Rescues[]
  Org          Org?      @relation(fields: [orgId], references: [id])
  orgId        String?
}

model Adopt {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pet       Pet?     @relation(fields: [petId], references: [id])
  petId     String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Org       Org?     @relation(fields: [orgId], references: [id])
  orgId     String?
}
